{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./contact.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./contact.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { ControllerBase } from '@app/controller/controller.base';\nimport { AppService } from '@app/services/app.service';\nimport { MessageService } from '@app/services/message.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nlet ContactComponent = class ContactComponent extends ControllerBase {\n  constructor(titleService, appService, messageService, spinner) {\n    super();\n    this.titleService = titleService;\n    this.appService = appService;\n    this.messageService = messageService;\n    this.spinner = spinner;\n    this.loading = false;\n  }\n  ngOnInit() {\n    this.setTitle('DevMartins | Contato');\n  }\n  setTitle(newTitle) {\n    this.titleService.setTitle(newTitle);\n  }\n  sendMail(form) {\n    if (!form.valid) {\n      this.messageService.toastWarning('Preencha os campos obrigatórios!');\n      return;\n    }\n    this.spinner.show();\n    this.appService.sendMail(form.value).then(res => {\n      form.reset();\n      this.spinner.hide();\n      this.messageService.toastSuccess('Email enviado com sucesso!', 'Muito Obrigado!');\n    }).catch(err => {\n      this.spinner.hide();\n      this.messageService.toastError('Por favor, tente novamente mais tarde!', 'Falha no envio!');\n    });\n  }\n  static {\n    this.ctorParameters = () => [{\n      type: Title\n    }, {\n      type: AppService\n    }, {\n      type: MessageService\n    }, {\n      type: NgxSpinnerService\n    }];\n  }\n};\nContactComponent = __decorate([Component({\n  selector: 'app-contact',\n  template: __NG_CLI_RESOURCE__0,\n  standalone: false,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ContactComponent);\nexport { ContactComponent };","map":{"version":3,"names":["Component","Title","ControllerBase","AppService","MessageService","NgxSpinnerService","ContactComponent","constructor","titleService","appService","messageService","spinner","loading","ngOnInit","setTitle","newTitle","sendMail","form","valid","toastWarning","show","value","then","res","reset","hide","toastSuccess","catch","err","toastError","__decorate","selector","template","__NG_CLI_RESOURCE__0","standalone"],"sources":["C:\\projetos\\meus projetos\\portfolio\\src\\app\\pages\\contact\\contact.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ControllerBase } from '@app/controller/controller.base';\r\nimport { AppService } from '@app/services/app.service';\r\nimport { MessageService } from '@app/services/message.service';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\n@Component({\n    selector: 'app-contact',\n    templateUrl: './contact.component.html',\n    styleUrls: ['./contact.component.css'],\n    standalone: false\n})\r\nexport class ContactComponent extends ControllerBase implements OnInit {\r\n  \r\n  loading: boolean = false;\r\n\r\n  constructor(\r\n    private titleService: Title,\r\n    private appService: AppService,\r\n    private messageService: MessageService,\r\n    private spinner: NgxSpinnerService\r\n  ) { \r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void { this.setTitle('DevMartins | Contato'); }\r\n\r\n  setTitle(newTitle: string): void { this.titleService.setTitle(newTitle); }\r\n\r\n  sendMail(form: NgForm): void {\r\n    if (!form.valid) {\r\n      this.messageService.toastWarning('Preencha os campos obrigatórios!');\r\n      return;\r\n    }\r\n\r\n    this.spinner.show();\r\n    this.appService.sendMail(form.value)\r\n      .then((res) => {\r\n        form.reset();\r\n        this.spinner.hide();\r\n        this.messageService.toastSuccess('Email enviado com sucesso!', 'Muito Obrigado!');\r\n      })\r\n      .catch((err) => {\r\n        this.spinner.hide();\r\n        this.messageService.toastError('Por favor, tente novamente mais tarde!', 'Falha no envio!');\r\n      });\r\n  }\r\n}\r\n"],"mappings":";;;AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,KAAK,QAAQ,2BAA2B;AACjD,SAASC,cAAc,QAAQ,iCAAiC;AAChE,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,SAASC,iBAAiB,QAAQ,aAAa;AAQxC,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAiB,SAAQJ,cAAc;EAIlDK,YACUC,YAAmB,EACnBC,UAAsB,EACtBC,cAA8B,EAC9BC,OAA0B;IAElC,KAAK,EAAE;IALC,KAAAH,YAAY,GAAZA,YAAY;IACZ,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,OAAO,GAAPA,OAAO;IANjB,KAAAC,OAAO,GAAY,KAAK;EASxB;EAEAC,QAAQA,CAAA;IAAW,IAAI,CAACC,QAAQ,CAAC,sBAAsB,CAAC;EAAE;EAE1DA,QAAQA,CAACC,QAAgB;IAAU,IAAI,CAACP,YAAY,CAACM,QAAQ,CAACC,QAAQ,CAAC;EAAE;EAEzEC,QAAQA,CAACC,IAAY;IACnB,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;MACf,IAAI,CAACR,cAAc,CAACS,YAAY,CAAC,kCAAkC,CAAC;MACpE;IACF;IAEA,IAAI,CAACR,OAAO,CAACS,IAAI,EAAE;IACnB,IAAI,CAACX,UAAU,CAACO,QAAQ,CAACC,IAAI,CAACI,KAAK,CAAC,CACjCC,IAAI,CAAEC,GAAG,IAAI;MACZN,IAAI,CAACO,KAAK,EAAE;MACZ,IAAI,CAACb,OAAO,CAACc,IAAI,EAAE;MACnB,IAAI,CAACf,cAAc,CAACgB,YAAY,CAAC,4BAA4B,EAAE,iBAAiB,CAAC;IACnF,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAI;MACb,IAAI,CAACjB,OAAO,CAACc,IAAI,EAAE;MACnB,IAAI,CAACf,cAAc,CAACmB,UAAU,CAAC,wCAAwC,EAAE,iBAAiB,CAAC;IAC7F,CAAC,CAAC;EACN;;;;;;;;;;;;;AAlCWvB,gBAAgB,GAAAwB,UAAA,EAN5B9B,SAAS,CAAC;EACP+B,QAAQ,EAAE,aAAa;EACvBC,QAAA,EAAAC,oBAAuC;EAEvCC,UAAU,EAAE,KAAK;;CACpB,CAAC,C,EACW5B,gBAAgB,CAmC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}