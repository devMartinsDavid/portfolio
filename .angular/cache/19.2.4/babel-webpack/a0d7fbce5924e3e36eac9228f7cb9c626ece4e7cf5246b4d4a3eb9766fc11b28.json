{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet ControllerBase = class ControllerBase {\n  constructor() {}\n  ngOnInit() {}\n  ngOnChanges() {}\n  ngAfterContentInit() {}\n  ngAfterViewInit() {}\n  ngOnDestroy() {}\n  getExtensionFileName(img) {\n    const parts = img.split(/[\\.]/g);\n    return parts[parts.length - 1];\n  }\n  getMessage() {\n    const hour = new Date().getHours();\n    if (hour < 5) {\n      return \"Uma Ótima Madrugada!\";\n    } else if (hour < 12) {\n      return \"Um Ótimo Dia!\";\n    } else if (hour < 18) {\n      return \"Uma Ótima Tarde!\";\n    } else {\n      return \"Uma Ótima Noite!\";\n    }\n  }\n  downloadPDF(file, data, type) {\n    let fileName = data + '_' + type + '.pdf';\n    const bytes = this.base64ToArrayBuffer(file);\n    const filePdf = new Blob([bytes], {\n      type: 'application/pdf'\n    });\n    let fileURL = URL.createObjectURL(filePdf);\n    let link = document.createElement(\"a\");\n    link.href = fileURL;\n    link.download = fileName;\n    document.body.append(link);\n    link.click();\n    link.remove();\n    // in case the Blob uses a lot of memory\n    window.addEventListener('focus', e => URL.revokeObjectURL(fileURL), {\n      once: true\n    });\n  }\n  base64ToArrayBuffer(base64) {\n    var binaryString = window.atob(base64);\n    var binaryLen = binaryString.length;\n    var bytes = new Uint8Array(binaryLen);\n    for (var i = 0; i < binaryLen; i++) {\n      var ascii = binaryString.charCodeAt(i);\n      bytes[i] = ascii;\n    }\n    return bytes;\n  }\n  static {\n    this.ctorParameters = () => [];\n  }\n};\nControllerBase = __decorate([Injectable({\n  providedIn: \"root\"\n})], ControllerBase);\nexport { ControllerBase };","map":{"version":3,"names":["Injectable","ControllerBase","constructor","ngOnInit","ngOnChanges","ngAfterContentInit","ngAfterViewInit","ngOnDestroy","getExtensionFileName","img","parts","split","length","getMessage","hour","Date","getHours","downloadPDF","file","data","type","fileName","bytes","base64ToArrayBuffer","filePdf","Blob","fileURL","URL","createObjectURL","link","document","createElement","href","download","body","append","click","remove","window","addEventListener","e","revokeObjectURL","once","base64","binaryString","atob","binaryLen","Uint8Array","i","ascii","charCodeAt","__decorate","providedIn"],"sources":["C:\\projetos\\meus projetos\\portfolio\\src\\app\\controller\\controller.base.ts"],"sourcesContent":["import { OnInit, AfterContentInit, AfterViewInit, OnDestroy, OnChanges, Injectable } from '@angular/core';\r\n\r\nimport { environment } from '@env/environment';\r\n\r\n@Injectable({providedIn: \"root\"})\r\nexport class ControllerBase implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, OnChanges {\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngOnChanges(){\r\n\r\n    }\r\n    \r\n    ngAfterContentInit() {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        \r\n    }\r\n\r\n    ngOnDestroy() {\r\n    }\r\n\r\n    getExtensionFileName(img: any): string {\r\n        const parts: string[] = img.split(/[\\.]/g);\r\n        return parts[parts.length -1];\r\n    }\r\n\r\n    getMessage(): string {\r\n        const hour: number = new Date().getHours();\r\n      \r\n        if (hour < 5) {\r\n          return \"Uma Ótima Madrugada!\";\r\n        } else if (hour < 12) {\r\n          return \"Um Ótimo Dia!\";\r\n        } else if (hour < 18) {\r\n          return \"Uma Ótima Tarde!\";\r\n        } else {\r\n          return \"Uma Ótima Noite!\";\r\n        }\r\n    }\r\n\r\n    downloadPDF(file: string, data: string, type: string) {\r\n    \r\n        let fileName = data +'_'+ type + '.pdf';\r\n        const bytes: Uint8Array = this.base64ToArrayBuffer(file);\r\n        const filePdf: Blob = new Blob([bytes], {type: 'application/pdf'});\r\n        let fileURL = URL.createObjectURL(filePdf);\r\n    \r\n        let link = document.createElement(\"a\");\r\n        link.href = fileURL;\r\n        link.download = fileName;\r\n        document.body.append(link);\r\n    \r\n        link.click();\r\n        link.remove();\r\n        // in case the Blob uses a lot of memory\r\n        window.addEventListener('focus', e=>URL.revokeObjectURL(fileURL), {once:true});\r\n    }\r\n    \r\n    base64ToArrayBuffer(base64: string): Uint8Array {\r\n        var binaryString = window.atob(base64);\r\n        var binaryLen = binaryString.length;\r\n        var bytes = new Uint8Array(binaryLen);\r\n        for (var i = 0; i < binaryLen; i++) {\r\n          var ascii = binaryString.charCodeAt(i);\r\n          bytes[i] = ascii;\r\n        }\r\n        return bytes;\r\n    }\r\n}"],"mappings":";AAAA,SAAwEA,UAAU,QAAQ,eAAe;AAKlG,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAEvBC,YAAA,GAAe;EAEfC,QAAQA,CAAA,GACR;EAEAC,WAAWA,CAAA,GAEX;EAEAC,kBAAkBA,CAAA,GAClB;EAEAC,eAAeA,CAAA,GAEf;EAEAC,WAAWA,CAAA,GACX;EAEAC,oBAAoBA,CAACC,GAAQ;IACzB,MAAMC,KAAK,GAAaD,GAAG,CAACE,KAAK,CAAC,OAAO,CAAC;IAC1C,OAAOD,KAAK,CAACA,KAAK,CAACE,MAAM,GAAE,CAAC,CAAC;EACjC;EAEAC,UAAUA,CAAA;IACN,MAAMC,IAAI,GAAW,IAAIC,IAAI,EAAE,CAACC,QAAQ,EAAE;IAE1C,IAAIF,IAAI,GAAG,CAAC,EAAE;MACZ,OAAO,sBAAsB;IAC/B,CAAC,MAAM,IAAIA,IAAI,GAAG,EAAE,EAAE;MACpB,OAAO,eAAe;IACxB,CAAC,MAAM,IAAIA,IAAI,GAAG,EAAE,EAAE;MACpB,OAAO,kBAAkB;IAC3B,CAAC,MAAM;MACL,OAAO,kBAAkB;IAC3B;EACJ;EAEAG,WAAWA,CAACC,IAAY,EAAEC,IAAY,EAAEC,IAAY;IAEhD,IAAIC,QAAQ,GAAGF,IAAI,GAAE,GAAG,GAAEC,IAAI,GAAG,MAAM;IACvC,MAAME,KAAK,GAAe,IAAI,CAACC,mBAAmB,CAACL,IAAI,CAAC;IACxD,MAAMM,OAAO,GAAS,IAAIC,IAAI,CAAC,CAACH,KAAK,CAAC,EAAE;MAACF,IAAI,EAAE;IAAiB,CAAC,CAAC;IAClE,IAAIM,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACJ,OAAO,CAAC;IAE1C,IAAIK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACtCF,IAAI,CAACG,IAAI,GAAGN,OAAO;IACnBG,IAAI,CAACI,QAAQ,GAAGZ,QAAQ;IACxBS,QAAQ,CAACI,IAAI,CAACC,MAAM,CAACN,IAAI,CAAC;IAE1BA,IAAI,CAACO,KAAK,EAAE;IACZP,IAAI,CAACQ,MAAM,EAAE;IACb;IACAC,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEC,CAAC,IAAEb,GAAG,CAACc,eAAe,CAACf,OAAO,CAAC,EAAE;MAACgB,IAAI,EAAC;IAAI,CAAC,CAAC;EAClF;EAEAnB,mBAAmBA,CAACoB,MAAc;IAC9B,IAAIC,YAAY,GAAGN,MAAM,CAACO,IAAI,CAACF,MAAM,CAAC;IACtC,IAAIG,SAAS,GAAGF,YAAY,CAAChC,MAAM;IACnC,IAAIU,KAAK,GAAG,IAAIyB,UAAU,CAACD,SAAS,CAAC;IACrC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,EAAEE,CAAC,EAAE,EAAE;MAClC,IAAIC,KAAK,GAAGL,YAAY,CAACM,UAAU,CAACF,CAAC,CAAC;MACtC1B,KAAK,CAAC0B,CAAC,CAAC,GAAGC,KAAK;IAClB;IACA,OAAO3B,KAAK;EAChB;;;;;AAnESrB,cAAc,GAAAkD,UAAA,EAD1BnD,UAAU,CAAC;EAACoD,UAAU,EAAE;AAAM,CAAC,CAAC,C,EACpBnD,cAAc,CAoE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}