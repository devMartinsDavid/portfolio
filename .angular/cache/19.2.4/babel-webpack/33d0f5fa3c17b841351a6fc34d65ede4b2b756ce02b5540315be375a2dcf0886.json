{"ast":null,"code":"import _asyncToGenerator from \"C:/projetos/meus projetos/portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license Angular v19.2.3\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { NgModule, signal, Injectable, ViewChild, Component } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { ROUTES, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS as _ROUTER_PROVIDERS, withPreloading, NoPreloading, Router, ɵafterNextNavigation as _afterNextNavigation, RouterOutlet } from '@angular/router';\nimport { provideLocationMocks } from '@angular/common/testing';\n\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location` and `LocationStrategy`.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterModule.forRoot(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n * @deprecated Use `provideRouter` or `RouterModule`/`RouterModule.forRoot` instead.\n * This module was previously used to provide a helpful collection of test fakes,\n * most notably those for `Location` and `LocationStrategy`.  These are generally not\n * required anymore, as `MockPlatformLocation` is provided in `TestBed` by default.\n * However, you can use them directly with `provideLocationMocks`.\n */\nclass RouterTestingModule {\n  static withRoutes(routes, config) {\n    return {\n      ngModule: RouterTestingModule,\n      providers: [{\n        provide: ROUTES,\n        multi: true,\n        useValue: routes\n      }, {\n        provide: ROUTER_CONFIGURATION,\n        useValue: config ? config : {}\n      }]\n    };\n  }\n  static ɵfac = function RouterTestingModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RouterTestingModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RouterTestingModule,\n    exports: [RouterModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [_ROUTER_PROVIDERS, provideLocationMocks(), withPreloading(NoPreloading).ɵproviders, {\n      provide: ROUTES,\n      multi: true,\n      useValue: []\n    }],\n    imports: [RouterModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterTestingModule, [{\n    type: NgModule,\n    args: [{\n      exports: [RouterModule],\n      providers: [_ROUTER_PROVIDERS, provideLocationMocks(), withPreloading(NoPreloading).ɵproviders, {\n        provide: ROUTES,\n        multi: true,\n        useValue: []\n      }]\n    }]\n  }], null, null);\n})();\nclass RootFixtureService {\n  fixture;\n  harness;\n  createHarness() {\n    if (this.harness) {\n      throw new Error('Only one harness should be created per test.');\n    }\n    this.harness = new RouterTestingHarness(this.getRootFixture());\n    return this.harness;\n  }\n  getRootFixture() {\n    if (this.fixture !== undefined) {\n      return this.fixture;\n    }\n    this.fixture = TestBed.createComponent(RootCmp);\n    this.fixture.detectChanges();\n    return this.fixture;\n  }\n  static ɵfac = function RootFixtureService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RootFixtureService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: RootFixtureService,\n    factory: RootFixtureService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RootFixtureService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass RootCmp {\n  outlet;\n  routerOutletData = signal(undefined);\n  static ɵfac = function RootCmp_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RootCmp)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RootCmp,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function RootCmp_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(RouterOutlet, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.outlet = _t.first);\n      }\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"routerOutletData\"]],\n    template: function RootCmp_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"router-outlet\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"routerOutletData\", ctx.routerOutletData());\n      }\n    },\n    dependencies: [RouterOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RootCmp, [{\n    type: Component,\n    args: [{\n      template: '<router-outlet [routerOutletData]=\"routerOutletData()\"></router-outlet>',\n      imports: [RouterOutlet]\n    }]\n  }], null, {\n    outlet: [{\n      type: ViewChild,\n      args: [RouterOutlet]\n    }]\n  });\n})();\n/**\n * A testing harness for the `Router` to reduce the boilerplate needed to test routes and routed\n * components.\n *\n * @publicApi\n */\nclass RouterTestingHarness {\n  /**\n   * Creates a `RouterTestingHarness` instance.\n   *\n   * The `RouterTestingHarness` also creates its own root component with a `RouterOutlet` for the\n   * purposes of rendering route components.\n   *\n   * Throws an error if an instance has already been created.\n   * Use of this harness also requires `destroyAfterEach: true` in the `ModuleTeardownOptions`\n   *\n   * @param initialUrl The target of navigation to trigger before returning the harness.\n   */\n  static create(initialUrl) {\n    return _asyncToGenerator(function* () {\n      const harness = TestBed.inject(RootFixtureService).createHarness();\n      if (initialUrl !== undefined) {\n        yield harness.navigateByUrl(initialUrl);\n      }\n      return harness;\n    })();\n  }\n  /**\n   * Fixture of the root component of the RouterTestingHarness\n   */\n  fixture;\n  /** @internal */\n  constructor(fixture) {\n    this.fixture = fixture;\n  }\n  /** Instructs the root fixture to run change detection. */\n  detectChanges() {\n    this.fixture.detectChanges();\n  }\n  /** The `DebugElement` of the `RouterOutlet` component. `null` if the outlet is not activated. */\n  get routeDebugElement() {\n    const outlet = this.fixture.componentInstance.outlet;\n    if (!outlet || !outlet.isActivated) {\n      return null;\n    }\n    return this.fixture.debugElement.query(v => v.componentInstance === outlet.component);\n  }\n  /** The native element of the `RouterOutlet` component. `null` if the outlet is not activated. */\n  get routeNativeElement() {\n    return this.routeDebugElement?.nativeElement ?? null;\n  }\n  navigateByUrl(url, requiredRoutedComponentType) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const router = TestBed.inject(Router);\n      let resolveFn;\n      const redirectTrackingPromise = new Promise(resolve => {\n        resolveFn = resolve;\n      });\n      _afterNextNavigation(TestBed.inject(Router), resolveFn);\n      yield router.navigateByUrl(url);\n      yield redirectTrackingPromise;\n      _this.fixture.detectChanges();\n      const outlet = _this.fixture.componentInstance.outlet;\n      // The outlet might not be activated if the user is testing a navigation for a guard that\n      // rejects\n      if (outlet && outlet.isActivated && outlet.activatedRoute.component) {\n        const activatedComponent = outlet.component;\n        if (requiredRoutedComponentType !== undefined && !(activatedComponent instanceof requiredRoutedComponentType)) {\n          throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but got ${activatedComponent.constructor.name}`);\n        }\n        return activatedComponent;\n      } else {\n        if (requiredRoutedComponentType !== undefined) {\n          throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but the navigation did not activate any component.`);\n        }\n        return null;\n      }\n    })();\n  }\n}\nexport { RouterTestingHarness, RouterTestingModule };","map":{"version":3,"names":["i0","NgModule","signal","Injectable","ViewChild","Component","TestBed","ROUTES","ROUTER_CONFIGURATION","RouterModule","ɵROUTER_PROVIDERS","_ROUTER_PROVIDERS","withPreloading","NoPreloading","Router","ɵafterNextNavigation","_afterNextNavigation","RouterOutlet","provideLocationMocks","RouterTestingModule","withRoutes","routes","config","ngModule","providers","provide","multi","useValue","ɵfac","RouterTestingModule_Factory","__ngFactoryType__","ɵmod","ɵɵdefineNgModule","type","exports","ɵinj","ɵɵdefineInjector","ɵproviders","imports","ngDevMode","ɵsetClassMetadata","args","RootFixtureService","fixture","harness","createHarness","Error","RouterTestingHarness","getRootFixture","undefined","createComponent","RootCmp","detectChanges","RootFixtureService_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","outlet","routerOutletData","RootCmp_Factory","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","RootCmp_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","decls","vars","consts","template","RootCmp_Template","ɵɵelement","ɵɵproperty","dependencies","encapsulation","create","initialUrl","_asyncToGenerator","inject","navigateByUrl","constructor","routeDebugElement","componentInstance","isActivated","debugElement","query","v","component","routeNativeElement","nativeElement","url","requiredRoutedComponentType","_this","router","resolveFn","redirectTrackingPromise","Promise","resolve","activatedRoute","activatedComponent","name"],"sources":["C:/projetos/meus projetos/portfolio/node_modules/@angular/router/fesm2022/testing.mjs"],"sourcesContent":["/**\n * @license Angular v19.2.3\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { NgModule, signal, Injectable, ViewChild, Component } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { ROUTES, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS as _ROUTER_PROVIDERS, withPreloading, NoPreloading, Router, ɵafterNextNavigation as _afterNextNavigation, RouterOutlet } from '@angular/router';\nimport { provideLocationMocks } from '@angular/common/testing';\n\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location` and `LocationStrategy`.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterModule.forRoot(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n * @deprecated Use `provideRouter` or `RouterModule`/`RouterModule.forRoot` instead.\n * This module was previously used to provide a helpful collection of test fakes,\n * most notably those for `Location` and `LocationStrategy`.  These are generally not\n * required anymore, as `MockPlatformLocation` is provided in `TestBed` by default.\n * However, you can use them directly with `provideLocationMocks`.\n */\nclass RouterTestingModule {\n    static withRoutes(routes, config) {\n        return {\n            ngModule: RouterTestingModule,\n            providers: [\n                { provide: ROUTES, multi: true, useValue: routes },\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: RouterTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.3\", ngImport: i0, type: RouterTestingModule, exports: [RouterModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: RouterTestingModule, providers: [\n            _ROUTER_PROVIDERS,\n            provideLocationMocks(),\n            withPreloading(NoPreloading).ɵproviders,\n            { provide: ROUTES, multi: true, useValue: [] },\n        ], imports: [RouterModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: RouterTestingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [RouterModule],\n                    providers: [\n                        _ROUTER_PROVIDERS,\n                        provideLocationMocks(),\n                        withPreloading(NoPreloading).ɵproviders,\n                        { provide: ROUTES, multi: true, useValue: [] },\n                    ],\n                }]\n        }] });\n\nclass RootFixtureService {\n    fixture;\n    harness;\n    createHarness() {\n        if (this.harness) {\n            throw new Error('Only one harness should be created per test.');\n        }\n        this.harness = new RouterTestingHarness(this.getRootFixture());\n        return this.harness;\n    }\n    getRootFixture() {\n        if (this.fixture !== undefined) {\n            return this.fixture;\n        }\n        this.fixture = TestBed.createComponent(RootCmp);\n        this.fixture.detectChanges();\n        return this.fixture;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: RootFixtureService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: RootFixtureService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: RootFixtureService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nclass RootCmp {\n    outlet;\n    routerOutletData = signal(undefined);\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: RootCmp, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.3\", type: RootCmp, isStandalone: true, selector: \"ng-component\", viewQueries: [{ propertyName: \"outlet\", first: true, predicate: RouterOutlet, descendants: true }], ngImport: i0, template: '<router-outlet [routerOutletData]=\"routerOutletData()\"></router-outlet>', isInline: true, dependencies: [{ kind: \"directive\", type: RouterOutlet, selector: \"router-outlet\", inputs: [\"name\", \"routerOutletData\"], outputs: [\"activate\", \"deactivate\", \"attach\", \"detach\"], exportAs: [\"outlet\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: RootCmp, decorators: [{\n            type: Component,\n            args: [{\n                    template: '<router-outlet [routerOutletData]=\"routerOutletData()\"></router-outlet>',\n                    imports: [RouterOutlet],\n                }]\n        }], propDecorators: { outlet: [{\n                type: ViewChild,\n                args: [RouterOutlet]\n            }] } });\n/**\n * A testing harness for the `Router` to reduce the boilerplate needed to test routes and routed\n * components.\n *\n * @publicApi\n */\nclass RouterTestingHarness {\n    /**\n     * Creates a `RouterTestingHarness` instance.\n     *\n     * The `RouterTestingHarness` also creates its own root component with a `RouterOutlet` for the\n     * purposes of rendering route components.\n     *\n     * Throws an error if an instance has already been created.\n     * Use of this harness also requires `destroyAfterEach: true` in the `ModuleTeardownOptions`\n     *\n     * @param initialUrl The target of navigation to trigger before returning the harness.\n     */\n    static async create(initialUrl) {\n        const harness = TestBed.inject(RootFixtureService).createHarness();\n        if (initialUrl !== undefined) {\n            await harness.navigateByUrl(initialUrl);\n        }\n        return harness;\n    }\n    /**\n     * Fixture of the root component of the RouterTestingHarness\n     */\n    fixture;\n    /** @internal */\n    constructor(fixture) {\n        this.fixture = fixture;\n    }\n    /** Instructs the root fixture to run change detection. */\n    detectChanges() {\n        this.fixture.detectChanges();\n    }\n    /** The `DebugElement` of the `RouterOutlet` component. `null` if the outlet is not activated. */\n    get routeDebugElement() {\n        const outlet = this.fixture.componentInstance.outlet;\n        if (!outlet || !outlet.isActivated) {\n            return null;\n        }\n        return this.fixture.debugElement.query((v) => v.componentInstance === outlet.component);\n    }\n    /** The native element of the `RouterOutlet` component. `null` if the outlet is not activated. */\n    get routeNativeElement() {\n        return this.routeDebugElement?.nativeElement ?? null;\n    }\n    async navigateByUrl(url, requiredRoutedComponentType) {\n        const router = TestBed.inject(Router);\n        let resolveFn;\n        const redirectTrackingPromise = new Promise((resolve) => {\n            resolveFn = resolve;\n        });\n        _afterNextNavigation(TestBed.inject(Router), resolveFn);\n        await router.navigateByUrl(url);\n        await redirectTrackingPromise;\n        this.fixture.detectChanges();\n        const outlet = this.fixture.componentInstance.outlet;\n        // The outlet might not be activated if the user is testing a navigation for a guard that\n        // rejects\n        if (outlet && outlet.isActivated && outlet.activatedRoute.component) {\n            const activatedComponent = outlet.component;\n            if (requiredRoutedComponentType !== undefined &&\n                !(activatedComponent instanceof requiredRoutedComponentType)) {\n                throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but got ${activatedComponent.constructor.name}`);\n            }\n            return activatedComponent;\n        }\n        else {\n            if (requiredRoutedComponentType !== undefined) {\n                throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but the navigation did not activate any component.`);\n            }\n            return null;\n        }\n    }\n}\n\nexport { RouterTestingHarness, RouterTestingModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}